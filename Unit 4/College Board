While Loops
----------
The code inside the loop runs as long as the condition is true.
Infinite Loop Risk: Be mindful to change variables within the loop to avoid endless loops.
Use Case: Useful when the number of repetitions is not known beforehand (e.g., reading input until valid data is entered).

int i = 1;
while (i <= 5) 
{
    System.out.println(i);
    i++;  // Incrementing i to avoid an infinite loop
}

Outputs will be)
1
2
3
4
5

 For Loops
----------

A loop with three parts:
Initialization: Set the loop control variable.
Condition: Runs as long as the condition is true.
Update: Adjusts the control variable after each iteration.
Use Case: Ideal when the number of iterations is known (e.g., iterating over arrays).

for (int i = 1; i <= 5; i++) 
{
    System.out.println(i);
}

Outputs will be)
1
2
3
4
5

int sum = 0;
for (int i = 1; i <= 10; i++) 
{
    sum += i;  
}
System.out.println("Sum: " + sum);

Output) Sum: 55


Nested Loops
----------

A nested loop refers to a loop inside another loop. In this structure, the inner loop executes all its iterations for each single iteration of the outer loop. 

This concept is useful when dealing with multi-dimensional data, such as matrices or tables.



for (int i = 0; i < outerLimit; i++) {
    for (int j = 0; j < innerLimit; j++) {
        // Code to execute in the inner loop
    }
}


for (int i = 1; i <= 5; i++)
{  
    for (int j = 1; j <= 5; j++) 
    {  
        System.out.print(i * j + "\t");
    }
    System.out.println();  
}


